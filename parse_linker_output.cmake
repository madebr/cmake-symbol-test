include(CheckCCompilerFlag)
include(CheckSymbolExists)
if(MSVC)
else()
    check_c_compiler_flag(-Wno-builtin-declaration-mismatch HAS_WNO_BUILTIN_DECLARATION_MISMATCH)
endif()

function(internal_check_symbols_in_parallel PARALLEL_SUCCESS)
    cmake_parse_arguments(ARG "VAR_UPPER" "VAR_PREFIX;VAR_SUFFIX" "SYMBOLS" ${ARGN})
    set(non_existing_sym wushiewush)

    if(NOT ARG_SYMBOLS)
        message(FATAL_ERROR "Missing required SYMBOLS")
    endif()
    if(NOT ARG_VAR_PREFIX AND NOT ARG_VAR_SUFFIX)
        message(FATAL_ERROR "At least one of VAR_PREFIX or VAR_SUFFIX must be defined")
    endif()

    set(symbols)
    foreach(symbol IN LISTS ARG_SYMBOLS)
        string(MAKE_C_IDENTIFIER "${symbol}" varname_core)
        if(ARG_VAR_UPPER)
            string(TOUPPER "${varname_core}" varname_core)
        endif()
        set(varname "${ARG_VAR_PREFIX}${varname_core}${ARG_VAR_SUFFIX}")
        if(NOT DEFINED "${varname}" AND NOT DEFINED CACHE{${varname}})
            list(APPEND symbols ${symbol})
            message(STATUS "Performing Parallel Linking Test ${varname}")
        endif()
    endforeach()
    if(NOT symbols)
        set(PARALLEL_SUCCESS 1 PARENT_SCOPE)
        return()
    endif()

    set(check_symbols ${symbols} ${non_existing_sym})

    set(decls)
    set(body)
    foreach(symbol IN LISTS check_symbols)
        string(APPEND decls "extern void ${symbol}(void);\n")
        string(APPEND body "  ${symbol}();\n")
    endforeach()

    set(src_path "${CMAKE_BINARY_DIR}/parse_linker_output.c")
    set(src_body "${decls}\nint main(int argc, char *argv[]) {\n  (void)argc;\n  (void)argv;\n\n${body}\n  return 0;\n}\n")
    file(WRITE "${src_path}" "${src_body}")

    set(check_c_flags "${CMAKE_C_FLAGS}")
    if(HAS_WNO_BUILTIN_DECLARATION_MISMATCH)
        string(APPEND check_c_flags " -Wno-builtin-declaration-mismatch")
    endif()

    message("check_c_flags=${check_c_flags}")

    set(CMAKE_TRY_COMPILE_TARGET_TYPE "EXECUTABLE")
    try_compile(try_compile_result "${CMAKE_CURRENT_BINARY_DIR}/tt" SOURCES "${src_path}" NO_CACHE OUTPUT_VARIABLE try_compile_output CMAKE_FLAGS "-DCOMPILE_DEFINITIONS=-Wno-builtin-declaration-mismatch" LINK_LIBRARIES "m")

    message(DEBUG "try_compile result: ${try_compile_result}")
    message(DEBUG "try_compile output: ${try_compile_output}")

    string(REGEX MATCHALL "\n[^\n]*[:]([^\n]*${non_existing_sym}[^\n]*)\n" custom_re "${try_compile_output}")
    if(NOT custom_re)
        message(WARNING "Parallel symbol detection using linker does not work")
        set(PARALLEL_SUCCESS 0 PARENT_SCOPE)
        return()
    endif()
    set(custom_re "${CMAKE_MATCH_1}")
    message(DEBUG  "symbol regex (before clean-up): ${custom_re}")
    string(REGEX REPLACE "(\\(|\\)|\\.|\\||\\[|\\])" "[\\1]" custom_re "${custom_re}")
    message(DEBUG "symbol regex (after clean-up): ${custom_re}")

    foreach(symbol IN LISTS symbols)
        set(result 1)
        string(REPLACE "${non_existing_sym}" "${symbol}" new_re "${custom_re}")
        message(DEBUG "re: ${new_re}")
        if(try_compile_output MATCHES "\n[^\n]*(undefined reference)[^\n]*`${symbol}'[^\n]*\n")
            set(result )
        endif()
        string(MAKE_C_IDENTIFIER "${symbol}" varname_core)
        if(ARG_VAR_UPPER)
            string(TOUPPER "${varname_core}" varname_core)
        endif()
        set(varname "${ARG_VAR_PREFIX}${varname_core}${ARG_VAR_SUFFIX}")
        set("${varname}" "${result}" CACHE INTERNAL "Test ${varname}")
        if(result)
            set(result_str "Success")
        else()
            set(result_str "Failed")
        endif()
        message(STATUS "Performing Parallel Linking Test ${varname} - ${result_str}")
    endforeach()
    set(${PARALLEL_SUCCESS} 1 PARENT_SCOPE)
endfunction()

function(check_symbols_in_parallel)
    internal_check_symbols_in_parallel(parallel_success ${ARGN})
    if(NOT parallel_success)
        cmake_parse_arguments(ARG "VAR_UPPER" "VAR_PREFIX;VAR_SUFFIX" "HEADERS;SYMBOLS" ${ARGN})
        foreach(symbol IN LISTS ARG_SYMBOLS)
            string(MAKE_C_IDENTIFIER "${symbol}" varname_core)
            if(ARG_VAR_UPPER)
                string(TOUPPER "${varname_core}" varname_core)
            endif()
            set(varname "${ARG_VAR_PREFIX}${varname_core}${ARG_VAR_SUFFIX}")
            if(NOT DEFINED "${varname}" AND NOT DEFINED CACHE{${varname}})
                list(APPEND symbols ${symbol})
            endif()
            check_symbol_exists("${symbol}" "${ARG_HEADERS}" ${varname})
        endforeach()
    endif()
endfunction()
